name: Sync master to master-jdk21 (sync PR)
on:
  push:
    branches:
      - master

env:
  SOURCE_BRANCH: master
  TARGET_BRANCH: master-jdk21
  GH_TOKEN: ${{ secrets.GH_TOKEN }}

jobs:
  sync:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Fetch target branch
        run: git fetch origin ${{ env.TARGET_BRANCH }}

      - name: Check if sync is needed
        id: diffcheck
        run: |
          # Source shared functions
          source .github/scripts/sync-functions.sh
          
          # Load excluded commits
          EXCLUDED_COMMITS=()
          load_excluded_commits EXCLUDED_COMMITS
          
          # Check commits
          COMMITS=$(git log --pretty=format:'%H' origin/${{ env.TARGET_BRANCH }}..HEAD)
          HAS_NON_JENKINS_COMMITS=false
          
          for sha in $COMMITS; do
              # Skip excluded commits
              if is_excluded_commit "$sha"; then
                  continue
              fi
              
              # Check if commit has non-jenkins files
              if has_non_jenkins_files "$sha"; then
                  HAS_NON_JENKINS_COMMITS=true
                  break
              fi
          done
          
          echo "sync_required=$HAS_NON_JENKINS_COMMITS" >> $GITHUB_OUTPUT

      - name: Collect GitHub usernames with emails and commit counts
        if: steps.diffcheck.outputs.sync_required == 'true'
        id: collectauthors
        shell: bash
        run: |
          # Source shared functions
          source .github/scripts/sync-functions.sh
          
          # Initialize
          declare -A USER_COMMIT_COUNTS
          declare -A USER_REVERT_COUNTS
          declare -A USER_DISPLAY_NAME
          
          # Load excluded commits
          EXCLUDED_COMMITS=()
          load_excluded_commits EXCLUDED_COMMITS
          
          # Process commits
          COMMITS=$(git log --pretty=format:'%H' origin/${{ env.TARGET_BRANCH }}..HEAD)
          
          for sha in $COMMITS; do
              # Skip excluded commits
              if is_excluded_commit "$sha"; then
                  continue
              fi
              
              # Skip jenkins-only commits
              if ! has_non_jenkins_files "$sha"; then
                  continue
              fi
              
              # Get user info
              user_info=$(get_user_info "$sha" "${{ github.repository }}")
              if [ -z "$user_info" ]; then
                  continue
              fi
              
              IFS='|' read -r user_key email <<< "$user_info"
              
              # Create display name
              if [[ "$user_key" =~ ^@ ]] && [ -n "$email" ] && [ "$email" != "$user_key" ]; then
                  display_name="$user_key ($email)"
              else
                  display_name="$user_key"
              fi
              
              # Count commits
              USER_DISPLAY_NAME["$user_key"]="$display_name"
              USER_COMMIT_COUNTS["$user_key"]=$(( ${USER_COMMIT_COUNTS["$user_key"]:-0} + 1 ))
              
              # Count reverts
              if is_revert_commit "$sha"; then
                  USER_REVERT_COUNTS["$user_key"]=$(( ${USER_REVERT_COUNTS["$user_key"]:-0} + 1 ))
              fi
          done
          
          # Generate mention list
          MENTION_LIST=""
          for user in "${!USER_COMMIT_COUNTS[@]}"; do
              count=${USER_COMMIT_COUNTS[$user]}
              revert_count=${USER_REVERT_COUNTS[$user]:-0}
              
              if [ "$revert_count" -gt 0 ]; then
                  MENTION_LIST="${MENTION_LIST}\n-  ${USER_DISPLAY_NAME[$user]} (${count} commit(s), ‚ö†Ô∏è ${revert_count} revert(s))"
              else
                  MENTION_LIST="${MENTION_LIST}\n-  ${USER_DISPLAY_NAME[$user]} (${count} commit(s))"
              fi
          done
          
          MENTION_LIST=$(echo -e "$MENTION_LIST" | sort)
          
          echo "author_mentions<<EOF" >> $GITHUB_OUTPUT
          echo -e "$MENTION_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check if commitignore was updated
        if: steps.diffcheck.outputs.sync_required == 'true'
        id: commitignore_check
        run: |
          # Check if .commitignore file was modified in recent commits
          # Use the same commit range as the sync check
          if git rev-parse --verify origin/${{ env.TARGET_BRANCH }} >/dev/null 2>&1; then
              COMMITS=$(git log --pretty=format:'%H' origin/${{ env.TARGET_BRANCH }}..HEAD)
          else
              # If target branch doesn't exist, check last 5 commits
              COMMITS=$(git log --pretty=format:'%H' -5)
          fi
          
          COMMITIGNORE_UPDATED=false
          
          for sha in $COMMITS; do
              echo "Checking commit $sha for .commitignore changes..."
              if git diff-tree --no-commit-id --name-only -r $sha | grep -q "^\.github/\.commitignore$"; then
                  echo "Found .commitignore update in commit $sha"
                  COMMITIGNORE_UPDATED=true
                  break
              fi
          done
          
          echo "commitignore_updated=$COMMITIGNORE_UPDATED" >> $GITHUB_OUTPUT
          echo "Commitignore updated: $COMMITIGNORE_UPDATED"

      - name: Check if PR already exists
        if: steps.diffcheck.outputs.sync_required == 'true'
        id: prcheck
        run: |
          pr_url=$(gh pr list --base ${{ env.TARGET_BRANCH }} --head ${{ env.SOURCE_BRANCH }} --state open --json url -q '.[0].url')
          if [ -n "$pr_url" ]; then
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "url=$pr_url" >> $GITHUB_OUTPUT
          else
              echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Close existing PR if commitignore was updated
        if: steps.prcheck.outputs.exists == 'true' && steps.commitignore_check.outputs.commitignore_updated == 'true'
        id: prclose
        run: |
          echo "Commitignore file was updated, closing existing sync PR to recreate with updated exclusions"
          gh pr close "${{ steps.prcheck.outputs.url }}" --comment "Closing PR due to commitignore updates. A new sync PR will be created with updated exclusions."
          echo "closed=true" >> $GITHUB_OUTPUT

      - name: Create PR if not exists or was closed
        if: (steps.prcheck.outputs.exists == 'false' || steps.prclose.outputs.closed == 'true') && steps.diffcheck.outputs.sync_required == 'true'
        id: prcreate
        run: |
          if [ "${{ steps.prclose.outputs.closed }}" = "true" ]; then
              PR_TITLE="Sync: ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }} (Updated with exclusions)"
              PR_BODY="Automated PR to sync latest changes from ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}.

This PR was recreated due to commitignore updates to ensure proper exclusions are applied."
          else
              PR_TITLE="Sync: ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}"
              PR_BODY="Automated PR to sync latest changes from ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}."
          fi
          
          pr_output=$(gh pr create \
              --head ${{ env.SOURCE_BRANCH }} \
              --base ${{ env.TARGET_BRANCH }} \
              --title "$PR_TITLE" \
              --body "$PR_BODY")
          pr_url=$(echo "$pr_output" | grep -Eo 'https://github\.com/[^ ]+')
          echo "url=$pr_url" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: steps.diffcheck.outputs.sync_required == 'true' && steps.collectauthors.outputs.author_mentions != ''
        env:
          PR_URL: ${{ steps.prcreate.outputs.url || steps.prcheck.outputs.url }}
          IS_NEW: ${{ steps.prcreate.outputs.url != '' }}
        run: |
          AUTHOR_MENTIONS="${{ steps.collectauthors.outputs.author_mentions }}"
          
          if [ "$IS_NEW" = "true" ]; then
              HEADER="###  Committers Requested for Review"
          else
              HEADER="### üîÑ New commits pushed to open PR"
          fi
          
          COMMENT_BODY=$(cat <<EOF
          ${HEADER}

          ${AUTHOR_MENTIONS}

          Please review and merge. üôè
          EOF
          )
          
          gh pr comment "$PR_URL" --body "$COMMENT_BODY"

      - name: Send Slack notification
        if: steps.diffcheck.outputs.sync_required == 'true' && steps.collectauthors.outputs.author_mentions != ''
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          PR_URL: ${{ steps.prcreate.outputs.url || steps.prcheck.outputs.url }}
          IS_NEW: ${{ steps.prcreate.outputs.url != '' }}
        run: |
          AUTHOR_MENTIONS="${{ steps.collectauthors.outputs.author_mentions }}"
          
          if [ "$IS_NEW" = "true" ]; then
              TEXT="üÜï *PR Created*: <$PR_URL|Sync ${{ env.SOURCE_BRANCH }} to ${{ env.TARGET_BRANCH }}>"
          else
              TEXT="üîÑ *New commit pushed to ${{ env.SOURCE_BRANCH }}*. PR open: <$PR_URL|View PR>"
          fi
          
          ESCAPED_MENTIONS=$(echo "$AUTHOR_MENTIONS" | sed 's/"/\\"/g')
          
          curl -X POST -H 'Content-Type: application/json' \
              --data "{
                  \"text\": \"$TEXT\n$ESCAPED_MENTIONS\n\nPlease review and merge. üôè\"
              }" \
              "$SLACK_WEBHOOK_URL"